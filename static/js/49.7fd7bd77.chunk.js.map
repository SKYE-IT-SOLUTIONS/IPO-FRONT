{"version":3,"sources":["components/EditJob.js"],"names":["JobContainer","styled","Container","font","general","TitleDiv","div","RequirementTitle","h4","Title","ApplyImage","image","Salary","p","CustomInput","Input","PositionInput","DateInput","SalaryInput","TextArea","textarea","Facts","li","ExtraInput","input","TableTr","tr","Error","SubmitBttn","CustomButton","AddJobPost","navigate","useNavigate","id","useParams","fonts","useContext","ThemeContext","useState","isLoading","setIsLoading","title","setJobTitle","error","status","titleInfo","setTitleInfo","position","setJobPosition","positionInfo","setPositionInfo","decription","setJobDescription","specList","setSpecList","specification","setJobSpecification","qlfList","setQlfList","qualification","setJobQualification","expList","setExpList","experience","setJobExperience","salary","setJobSalary","date","setDate","dataService","DataService","setError","useEffect","fetchJob","a","console","log","getJob","data","description","specifications","qualifications","experiences","deadline","Simple_Validator","type","value","placeholder","onChange","e","val","target","rows","style","padding","md","sm","JobPhoto","map","index","icon","marginLeft","color","height","onClick","list","filter","_","ind","length","parseInt","submit"],"mappings":"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","file":"static/js/49.7fd7bd77.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useContext, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Container, Row, Col, CustomButton, Input } from \"./CommonComponents\";\nimport JobPhoto from \"../assets/JobApply.svg\";\nimport { Icon } from \"@iconify/react\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport { Simple_Validator } from \"../utils/validation\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport DataService from \"../services/DataService\";\nimport Spinner from \"./Spinner\";\n\nconst JobContainer = styled(Container)`\n  font-family: ${({ font }) => font.general};\n  margin: 10px 0;\n`;\n\nconst TitleDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 5px 0;\n`;\nconst RequirementTitle = styled.h4`\n  padding-top: 10px;\n  font-size: 20px;\n\n  @media (max-width: 1040px) {\n    font-size: 18px;\n  }\n`;\n\n// const Logo = styled.div`\n//   background-image: url(\"https://images.unsplash.com/photo-1555596899-d634257b55bb?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80\");\n//   background-position: center;\n//   background-repeat: no;\n//   background-size: cover;\n//   height: 55px;\n//   width: 55px;\n//   border-radius: 50px;\n//   border: 2px solid black;\n// `;\n\nconst Title = styled.h4`\n  margin: auto 0;\n  padding-right: 5px;\n  font-size: 20px;\n  padding: 15px 0 10px 0;\n\n  @media (max-width: 1040px) {\n    font-size: 18px;\n  }\n`;\n\nconst ApplyImage = styled.div`\n  height: 450px;\n  width: 512px;\n  background-image: url(${({ image }) => image});\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  margin: auto;\n\n  @media (min-width: 768px) and (max-width: 1040px) {\n    height: 360px;\n    width: 360px;\n  }\n\n  @media (max-width: 768px) and (min-width: 576px) {\n    height: 360px;\n    width: 360px;\n  }\n\n  @media (max-width: 576px) {\n    height: 250px;\n    width: 250px;\n  }\n`;\n\nconst Salary = styled.p`\n  margin: auto;\n  padding-right: 15px;\n  font-size: 20px;\n\n  @media (max-width: 1040px) {\n    font-size: 18px;\n  }\n`;\n\nconst CustomInput = styled(Input)`\n  width: 100%;\n\n  @media (max-width: 1040px) {\n    font-size: 13px;\n  }\n`;\n\nconst PositionInput = styled(Input)`\n  width: 40%;\n\n  @media (max-width: 1040px) {\n    font-size: 13px;\n    width: 80%;\n  }\n`;\n\nconst DateInput = styled(Input)`\n  width: 150px;\n  margin-left: 15px;\n\n  @media (min-width: 768px) and (max-width: 1040px) {\n    font-size: 13px;\n  }\n`;\n\nconst SalaryInput = styled(Input)`\n  width: 150px;\n  margin-left: 15px;\n  /* margin-bottom: 10px; */\n\n  @media (max-width: 1040px) {\n    font-size: 13px;\n  }\n`;\n\nconst TextArea = styled.textarea`\n  width: 100%;\n  border-radius: 5px;\n  border: 2px solid black;\n  padding: 5px;\n\n  @media (max-width: 1040px) {\n    font-size: 13px;\n  }\n`;\n\nconst Facts = styled.li`\n  @media (max-width: 1040px) {\n    font-size: 13px;\n  }\n`;\n\nconst ExtraInput = styled.input`\n  width: 95%;\n  border-radius: 5px;\n  border: 2px solid black;\n  padding: 5px;\n\n  @media (min-width: 1041px) and (max-width: 1200px) {\n    width: 90%;\n  }\n\n  @media (max-width: 1040px) {\n    width: 85%;\n    font-size: 13px;\n  }\n`;\n\nconst TableTr = styled.tr`\n  height: auto;\n`;\n\nconst Error = styled.p`\n  color: red;\n  font-size: 14px;\n  margin: 0px;\n  padding: 5px 0px;\n\n  @media (max-width: 1040px) {\n    width: 85%;\n    font-size: 13px;\n  }\n`;\n\nconst SubmitBttn = styled(CustomButton)`\n  margin: 35px 10px 15px 10px;\n`;\n\nfunction AddJobPost() {\n  let navigate = useNavigate();\n  const { id } = useParams();\n\n  const { fonts } = useContext(ThemeContext);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [title, setJobTitle] = useState(\"\");\n  const [titleInfo, setTitleInfo] = useState({ error: null, status: false });\n\n  const [position, setJobPosition] = useState(\"\");\n  const [positionInfo, setPositionInfo] = useState({\n    error: null,\n    status: false,\n  });\n\n  const [decription, setJobDescription] = useState(\"\");\n\n  const [specList, setSpecList] = useState([]);\n  const [specification, setJobSpecification] = useState(\"\");\n\n  const [qlfList, setQlfList] = useState([]);\n  const [qualification, setJobQualification] = useState(\"\");\n\n  const [expList, setExpList] = useState([]);\n  const [experience, setJobExperience] = useState(\"\");\n\n  const [salary, setJobSalary] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n\n  const dataService = new DataService();\n\n  const [error, setError] = useState(\"\");\n\n  // const handleJobSubmit = async (payload) => {\n  //   setIsLoading(true);\n  //   const {status,data,error} = await dataService.handleSubmitJob(payload);\n  //   if(status){\n  //     console.log(\"Job Post Successfully\");\n  //     setIsLoading(false);\n  //     navigate(`/admin/job/${data}`);\n\n  //   }else{\n  //     setIsLoading(false);\n  //     console.log(error);\n  //   }\n\n  // }\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchJob = async () => {\n      console.log(id);\n      const { status, data, error } = id ? await dataService.getJob(id) : null;\n      if (status) {\n        console.log(\"data\", data);\n        setJobTitle(data?.title);\n        setJobDescription(data?.description);\n        setJobPosition(data?.position);\n        setSpecList(data?.specifications);\n        setQlfList(data?.qualifications);\n        setExpList(data?.experiences);\n        setJobSalary(data?.salary);\n        setDate(data?.deadline);\n        setTitleInfo(Simple_Validator(data?.title, \"Title\"));\n        setPositionInfo(Simple_Validator(data?.position, \"Job Position\"));\n      } else {\n        setError(error);\n        navigate(\"/404\");\n      }\n      setIsLoading(false);\n    };\n    fetchJob();\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <JobContainer font={fonts}>\n          <TitleDiv>\n            <Title>Job Title</Title>\n            <CustomInput\n              type=\"text\"\n              value={title}\n              placeholder=\"Enter Job Title\"\n              onChange={(e) => {\n                let val = e.target.value;\n                setJobTitle(val);\n                setTitleInfo(Simple_Validator(val, \"Title\"));\n              }}\n            />\n            {!titleInfo.status && <Error>{titleInfo.error}</Error>}\n\n            <Title>Job Position</Title>\n            <PositionInput\n              type=\"text\"\n              value={position}\n              placeholder=\"Enter Job Position\"\n              onChange={(e) => {\n                let val = e.target.value;\n                setJobPosition(val);\n                setPositionInfo(Simple_Validator(val, \"Job Position\"));\n              }}\n            />\n            {!positionInfo.status && <Error>{positionInfo.error}</Error>}\n          </TitleDiv>\n\n          <Title>Job Description</Title>\n          <TextArea\n            rows=\"4\"\n            value={decription}\n            placeholder=\"Enter Description\"\n            onChange={(e) => {\n              let val = e.target.value;\n              setJobDescription(val);\n            }}\n          />\n          <Row style={{ padding: \"15px 0\" }}>\n            <Col md={6} sm={12}>\n              <ApplyImage image={JobPhoto} />\n            </Col>\n            <Col md={6} sm={12}>\n              <RequirementTitle>Specifications</RequirementTitle>\n              <ul>\n                {specList &&\n                  specList.map((value, index) => (\n                    <Facts key={index}>\n                      {value}{\" \"}\n                      <Icon\n                        icon=\"ic:round-cancel\"\n                        style={{ marginLeft: \"5px\" }}\n                        color=\"red\"\n                        height=\"20\"\n                        onClick={() => {\n                          let list = specList.filter((_, ind) => ind !== index);\n                          setSpecList(list);\n                        }}\n                      />\n                    </Facts>\n                  ))}\n                {specList.length < 5 && (\n                  <li>\n                    <ExtraInput\n                      type=\"text\"\n                      value={specification}\n                      placeholder=\"Enter Job Specification\"\n                      onChange={(e) => {\n                        setJobSpecification(e.target.value);\n                      }}\n                    />{\" \"}\n                    <Icon\n                      icon=\"akar-icons:circle-plus-fill\"\n                      height=\"20\"\n                      color=\"#001e62\"\n                      onClick={() => {\n                        if (specification !== \"\") {\n                          let list = [...specList, specification];\n                          setSpecList(list);\n                          setJobSpecification(\"\");\n                        }\n                      }}\n                    />\n                  </li>\n                )}\n              </ul>\n\n              <RequirementTitle>Qualifications</RequirementTitle>\n              <ul>\n                {qlfList &&\n                  qlfList.map((value, index) => (\n                    <Facts key={index}>\n                      {value}{\" \"}\n                      <Icon\n                        icon=\"ic:round-cancel\"\n                        style={{ marginLeft: \"5px\" }}\n                        color=\"red\"\n                        height=\"20\"\n                        onClick={() => {\n                          let list = qlfList.filter((_, ind) => ind !== index);\n                          setQlfList(list);\n                        }}\n                      />\n                    </Facts>\n                  ))}\n                {qlfList.length < 5 && (\n                  <li>\n                    <ExtraInput\n                      type=\"text\"\n                      value={qualification}\n                      placeholder=\"Enter Job Qualification\"\n                      onChange={(e) => {\n                        setJobQualification(e.target.value);\n                      }}\n                    />{\" \"}\n                    <Icon\n                      icon=\"akar-icons:circle-plus-fill\"\n                      height=\"20\"\n                      color=\"#001e62\"\n                      onClick={() => {\n                        if (qualification !== \"\") {\n                          let list = [...qlfList, qualification];\n                          setQlfList(list);\n                          setJobQualification(\"\");\n                        }\n                      }}\n                    />\n                  </li>\n                )}\n              </ul>\n\n              <RequirementTitle>Experience</RequirementTitle>\n              <ul>\n                {expList &&\n                  expList.map((value, index) => (\n                    <Facts key={index}>\n                      {value}{\" \"}\n                      <Icon\n                        icon=\"ic:round-cancel\"\n                        style={{ marginLeft: \"5px\" }}\n                        color=\"red\"\n                        height=\"20\"\n                        onClick={() => {\n                          let list = expList.filter((_, ind) => ind !== index);\n                          setExpList(list);\n                        }}\n                      />\n                    </Facts>\n                  ))}\n                {expList.length < 5 && (\n                  <li>\n                    <ExtraInput\n                      type=\"text\"\n                      value={experience}\n                      placeholder=\"Enter Experience\"\n                      onChange={(e) => {\n                        setJobExperience(e.target.value);\n                      }}\n                    />{\" \"}\n                    <Icon\n                      icon=\"akar-icons:circle-plus-fill\"\n                      height=\"20\"\n                      color=\"#001e62\"\n                      onClick={() => {\n                        if (experience !== \"\") {\n                          let list = [...expList, experience];\n                          setExpList(list);\n                          setJobExperience(\"\");\n                        }\n                      }}\n                    />\n                  </li>\n                )}\n              </ul>\n\n              <table>\n                <tbody>\n                  <TableTr>\n                    <td>\n                      <Salary>Salary</Salary>\n                    </td>\n                    <td>\n                      :{\" \"}\n                      <SalaryInput\n                        type=\"string\"\n                        placeholder=\"0.00\"\n                        value={salary}\n                        onChange={(e) => {\n                          let value = parseInt(e.target.value);\n                          setJobSalary(value);\n                        }}\n                      />\n                    </td>\n                  </TableTr>\n                  <br />\n                  <TableTr>\n                    <td>\n                      <Salary>Application Deadline</Salary>\n                    </td>\n                    <td>\n                      :{\" \"}\n                      <DateInput\n                        type=\"date\"\n                        value={date}\n                        onChange={(e) => {\n                          let date = e.target.value;\n                          setDate(date);\n                          console.log(e.target.value);\n                        }}\n                      />\n                    </td>\n                  </TableTr>\n                </tbody>\n              </table>\n              <SubmitBttn\n                onClick={() => {\n                  navigate(\"/job/preview\");\n                }}\n              >\n                Preview\n              </SubmitBttn>\n              <SubmitBttn\n                submit\n                onClick={() => {\n                  console.log(\"Title : \", titleInfo.status);\n                  if (titleInfo.status && positionInfo.status) {\n                    console.log(\"Working\");\n                    //   handleJobSubmit(\n                    //     {\n                    //       \"title\": title,\n                    //       \"position\": position,\n                    //       \"description\": decription,\n                    //       \"specifications\": specList,\n                    //       \"qualifications\": qlfList,\n                    //       \"experiences\": expList,\n                    //       \"salary\":salary,\n                    //       \"deadline\": date\n                    //   }\n                    //   );\n                  }\n                }}\n              >\n                Submit\n              </SubmitBttn>\n            </Col>\n          </Row>\n        </JobContainer>\n      )}\n    </>\n  );\n}\n\nexport default AddJobPost;\n"],"sourceRoot":""}