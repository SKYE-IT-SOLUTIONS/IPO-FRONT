{"version":3,"sources":["components/CustomSnackBar.js","assets/loginImage.svg","components/LoginPage.js"],"names":["Alert","React","forwardRef","props","ref","elevation","variant","CustomSnackBar","isOpen","handleClose","severity","message","open","autoHideDuration","onClose","sx","width","OuterDiv","styled","Container","font","general","LoginImg","img","Error","p","Heading2","h1","LoginCol","Col","LoginButton","CustomButton","bgColor","SeparateDiv","div","ForgetPassword","Lable","LoginPage","useContext","ThemeContext","theme","light","dark","fonts","them","button","dispatch","useDispatch","user","AuthServices","navigate","useNavigate","useState","isLoading","setisLoading","username","setUsername","error","status","usernameInfo","setUsernameInfo","password","setPassword","passwordInfo","setPasswordInfo","isErrorMsgOpen","setIsErrorMsgOpen","submitError","setSubmitError","handleLogin","a","data","console","log","setUserId","id","setUserLoggedIn","setUserRole","roles","style","paddingTop","md","sm","xs","src","loginImg","type","placeholder","onChange","e","target","value","Simple_Validator","disabled","disable","login","onClick","event","reason"],"mappings":"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","file":"static/js/36.39301c90.chunk.js","sourcesContent":["/* eslint-disable no-lone-blocks */\nimport React from \"react\";\n\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert from \"@mui/material/Alert\";\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport default function CustomSnackBar({\n  isOpen,\n  handleClose,\n  severity,\n  message,\n}) {\n  return (\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={severity} sx={{ width: \"100%\" }}>\n        {message}!\n      </Alert>\n    </Snackbar>\n  );\n}\n\n{\n/* <Alert severity=\"error\">This is an error message!</Alert>\n    <Alert severity=\"warning\">This is a warning message!</Alert>\n    <Alert severity=\"info\">This is an information message!</Alert>\n    <Alert severity=\"success\">This is a success message!</Alert> */\n}\n","export default __webpack_public_path__ + \"static/media/loginImage.283034d7.svg\";","import React, { useState, useContext } from \"react\";\nimport {\n  Container,\n  Row,\n  Col,\n  CustomButton,\n  Input,\n  Lable,\n} from \"./CommonComponents\";\nimport styled from \"styled-components\";\nimport loginImg from \"../assets/loginImage.svg\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport AuthServices from \"../services/AuthServices\";\nimport { Simple_Validator } from \"../utils/validation\";\nimport { useDispatch } from \"react-redux\";\nimport { setUserId, setUserLoggedIn, setUserRole } from \"../store/userSlice\";\nimport CustomSnackBar from \"./CustomSnackBar\";\n\nconst OuterDiv = styled(Container)`\n  font-family: ${({ font }) => font.general};\n`;\n\nconst LoginImg = styled.img`\n  width: 100%;\n`;\n\nconst Error = styled.p`\n  color: red;\n  font-size: 13px;\n  margin: 0px;\n  padding: 5px 0px;\n`;\n\nconst Heading2 = styled.h1`\n  font-size: 23px;\n  text-align: left;\n  padding: 10px 0px;\n  font-weight: bolder;\n`;\n\nconst LoginCol = styled(Col)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst LoginButton = styled(CustomButton)`\n  background: ${({ bgColor }) => bgColor};\n  border-radius: 5px;\n  margin-top: 15px;\n`;\n\nconst SeparateDiv = styled.div`\n  border: 4px solid;\n  border-radius: 10px;\n  padding: 15px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-bottom: 15px;\n  text-align: left;\n`;\n\nconst ForgetPassword = styled(Lable)`\n  cursor: pointer;\n  font-size: 13px;\n  text-align: right;\n`;\n\nfunction LoginPage(props) {\n  const { theme, light, dark, fonts } = useContext(ThemeContext);\n  const them = theme ? light.button : dark.button;\n\n  const dispatch = useDispatch();\n  const user = new AuthServices();\n  const navigate = useNavigate();\n\n  const [isLoading, setisLoading] = useState(false);\n\n  const [username, setUsername] = useState(\"\");\n  const [usernameInfo, setUsernameInfo] = useState({\n    error: null,\n    status: false,\n  });\n\n  const [password, setPassword] = useState(\"\");\n  const [passwordInfo, setPasswordInfo] = useState({\n    error: null,\n    status: false,\n  });\n\n  const [isErrorMsgOpen, setIsErrorMsgOpen] = useState(false);\n  const [submitError, setSubmitError] = useState(null);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setIsErrorMsgOpen(false);\n  };\n\n  const handleLogin = async () => {\n    setisLoading(true);\n    const { status, data, error } = await user.handleLogin({\n      username: username,\n      password: password,\n    });\n    console.log(status);\n    setisLoading(false);\n    if (status) {\n      dispatch(setUserId(data?.id));\n      dispatch(setUserLoggedIn(\"NBSS\"));\n      dispatch(setUserRole(data?.roles[0]));\n      console.log(\"Role\", data?.roles[0]);\n      switch (data?.roles[0]) {\n        case \"ROLE_ADMIN\":\n          navigate(\"/admin/dashboard\");\n          break;\n        case \"ROLE_STUDENT\":\n          navigate(\"/student/dashboard\");\n          break;\n        case \"ROLE_COMPANY\":\n          navigate(\"/company/dashboard\");\n          break;\n        default:\n          navigate(\"/\");\n          break;\n      }\n    } else {\n      if (error === 423) {\n        navigate(\"/423\");\n      } else {\n        setIsErrorMsgOpen(true);\n        setSubmitError(error);\n      }\n    }\n  };\n\n  return (\n    <OuterDiv font={fonts}>\n      <Row style={{ paddingTop: \"10px\" }}>\n        <LoginCol md={6} sm={12} xs={12}>\n          <LoginImg src={loginImg} />\n        </LoginCol>\n        <LoginCol md={6} sm={12} xs={12}>\n          <SeparateDiv>\n            <Heading2>Log in to an existing profile</Heading2>\n\n            <Lable>Email Address/Index Number(AG/XX/2018/XXXX)*</Lable>\n            <Input\n              type=\"text\"\n              placeholder=\"Enter your email\"\n              onChange={(e) => {\n                setUsername(e.target.value);\n                setUsernameInfo(Simple_Validator(e.target.value, \"Username\"));\n              }}\n            />\n            {usernameInfo.error != null && <Error>{usernameInfo.error}</Error>}\n\n            <Lable>Password</Lable>\n            <Input\n              type=\"password\"\n              placeholder=\"Enter your password\"\n              onChange={(e) => {\n                setPassword(e.target.value);\n                setPasswordInfo(Simple_Validator(e.target.value, \"Password\"));\n              }}\n            />\n            {passwordInfo.error != null && <Error>{passwordInfo.error}</Error>}\n\n            <LoginButton\n              disabled={\n                isLoading || !usernameInfo.status || !passwordInfo.status\n              }\n              bgColor={!isLoading ? them.login : them.disable}\n              onClick={async () => {\n                if (usernameInfo.status && passwordInfo.status) {\n                  handleLogin();\n                }\n              }}\n            >\n              Log In\n            </LoginButton>\n            <ForgetPassword>Forgot Password</ForgetPassword>\n          </SeparateDiv>\n\n          {/* <SeparateDiv>\n            <Heading2>Create a profile</Heading2>\n            <Lable>\n              If you haven‘t set up your Xsalonce profile yet, why not take a\n              minute to register ? We promise it won’t take long.\n            </Lable>\n              <LoginBttn>Register</LoginBttn>\n\n          </SeparateDiv> */}\n        </LoginCol>\n      </Row>\n      <CustomSnackBar\n        isOpen={isErrorMsgOpen}\n        severity=\"error\"\n        handleClose={handleClose}\n        message={submitError}\n      />\n    </OuterDiv>\n  );\n}\n\nexport default LoginPage;\n"],"sourceRoot":""}