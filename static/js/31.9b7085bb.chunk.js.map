{"version":3,"sources":["components/CustomSnackBar.js","utils/passwordMatcher.js","assets/studentreg.svg","components/StudentRegister.js"],"names":["Alert","React","forwardRef","props","ref","elevation","variant","CustomSnackBar","isOpen","handleClose","severity","message","open","autoHideDuration","onClose","sx","width","passwordMatcher","password1","password2","error","isMatching","RegistrationDiv","styled","Container","font","general","LoginImg","img","Heading","h1","LoginCol","Col","LoginBttn","CustomButton","Error","p","Success","SeparateDiv","div","StudentRegister","fonts","useContext","ThemeContext","useState","name","setName","reg","setReg","password","setpassword","confirmPassword","setConfirmPassword","status","nameInfo","setNameInfo","regInfo","setRegInfo","passwordInfo","setPasswordInfo","matchPassword","setMatchPassword","setError","isErrorMsgOpen","setIsErrorMsgOpen","isLoading","setIsLoading","recaptcha","setRecaptcha","authServices","AuthServices","navigate","useNavigate","handleSubmit","credentials","a","handleStudentSignUp","data","console","log","state","email","style","paddingTop","md","sm","xs","src","student","value","type","onChange","e","val","target","Simple_Validator","Validator","patternPassword","submit","disabled","onClick","username","event","reason"],"mappings":"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","file":"static/js/31.9b7085bb.chunk.js","sourcesContent":["/* eslint-disable no-lone-blocks */\nimport React from \"react\";\n\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert from \"@mui/material/Alert\";\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport default function CustomSnackBar({\n  isOpen,\n  handleClose,\n  severity,\n  message,\n}) {\n  return (\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity={severity} sx={{ width: \"100%\" }}>\n        {message}!\n      </Alert>\n    </Snackbar>\n  );\n}\n\n{\n/* <Alert severity=\"error\">This is an error message!</Alert>\n    <Alert severity=\"warning\">This is a warning message!</Alert>\n    <Alert severity=\"info\">This is an information message!</Alert>\n    <Alert severity=\"success\">This is a success message!</Alert> */\n}\n","export const passwordMatcher = (password1,password2) => {\n    let error = null\n    let isMatching = false\n    if(password1 === \"\"){\n        error = \"Password is empty\"\n    }else if(password1 === password2){\n        isMatching = true\n    }else{\n        error = \"Password is not matching\"\n    }\n    return {error,isMatching}\n}","export default __webpack_public_path__ + \"static/media/studentreg.b2c81e3d.svg\";","import React, { useContext, useState } from \"react\";\nimport {\n  CustomButton,\n  Input,\n  Lable,\n  Container,\n  Row,\n  Col,\n} from \"./CommonComponents\";\nimport styled from \"styled-components\";\nimport student from \"../assets/studentreg.svg\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport { passwordMatcher } from \"../utils/passwordMatcher\";\nimport { Simple_Validator, Validator } from \"../utils/validation\";\nimport { patternPassword } from \"../config/pattern\";\nimport AuthServices from \"../services/AuthServices\";\nimport { useNavigate } from \"react-router-dom\";\nimport CustomSnackBar from \"./CustomSnackBar\";\nimport { Recaptcha } from \"./CommonComponents\";\n\nconst RegistrationDiv = styled(Container)`\n  font-family: ${({ font }) => font.general};\n`;\n\nconst LoginImg = styled.img`\n  width: 100%;\n`;\n\nconst Heading = styled.h1`\n  font-size: 25px;\n  text-align: left;\n  padding: 10px 0px;\n  font-weight: bolder;\n  color: #001e62;\n  text-align: center;\n`;\n\nconst LoginCol = styled(Col)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst LoginBttn = styled(CustomButton)`\n  width: 150px;\n  margin: 15px 0px;\n`;\n\nconst Error = styled.p`\n  color: #dc281e;\n  font-size: 13px;\n  margin: 0px;\n  text-align: left;\n  padding: 5px 0 5px 2px;\n`;\n\nconst Success = styled.p`\n  color: #009933;\n  font-size: 13px;\n  margin: 0px;\n  text-align: left;\n  padding: 5px 0 5px 2px;\n`;\n\nconst SeparateDiv = styled.div`\n  border: 4px solid;\n  border-radius: 10px;\n  padding: 15px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-bottom: 15px;\n  text-align: left;\n  background-color: #eef2f3;\n`;\n\nfunction StudentRegister() {\n  const { fonts } = useContext(ThemeContext);\n\n  const [name, setName] = useState(\"\");\n  const [reg, setReg] = useState(\"\");\n  const [password, setpassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const [nameInfo, setNameInfo] = useState({ error: null, status: false });\n  const [regInfo, setRegInfo] = useState({ error: null, status: false });\n  const [passwordInfo, setPasswordInfo] = useState({\n    error: null,\n    status: false,\n  });\n  const [matchPassword, setMatchPassword] = useState({\n    error: null,\n    isMatching: false,\n  });\n\n  const [error, setError] = useState(\"\");\n  const [isErrorMsgOpen, setIsErrorMsgOpen] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [recaptcha, setRecaptcha] = useState(false);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setIsErrorMsgOpen(false);\n  };\n\n  const authServices = new AuthServices();\n  const navigate = useNavigate();\n\n  const handleSubmit = async (credentials) => {\n    setIsLoading(true);\n    const { status, data, error } = await authServices.handleStudentSignUp(\n      credentials\n    );\n    if (status) {\n      // sessionStorage.setItem(\"email\", data?.email);\n      console.log(data, 1);\n      navigate(\"/register/sendMail\", { state: { email: data } });\n    } else {\n      setError(error);\n      setIsErrorMsgOpen(true);\n    }\n    setIsLoading(false);\n  };\n\n  function onChange(value) {\n    console.log(\"Captcha value:\", value);\n    setRecaptcha(!recaptcha);\n  }\n\n  return (\n    <RegistrationDiv font={fonts}>\n      <Row style={{ paddingTop: \"10px\" }}>\n        <LoginCol md={6} sm={12} xs={12}>\n          <LoginImg src={student} />\n        </LoginCol>\n        <LoginCol md={6} sm={12} xs={12}>\n          <SeparateDiv>\n            <Heading>STUDENT REGISTRATION</Heading>\n\n            <Lable>Student Registration Number</Lable>\n            <Input\n              value={reg}\n              type=\"text\"\n              onChange={(e) => {\n                let val = e.target.value;\n                setReg(val);\n                setRegInfo(Simple_Validator(val, \"Registration Number\"));\n              }}\n            />\n            {regInfo.error && <Error>{regInfo.error}</Error>}\n\n            <Lable>Name</Lable>\n            <Input\n              value={name}\n              type=\"text\"\n              onChange={(e) => {\n                let val = e.target.value;\n                setName(val);\n                setNameInfo(Simple_Validator(val, \"Company Name\"));\n              }}\n            />\n            {nameInfo.error && <Error>{nameInfo.error}</Error>}\n\n            <Lable>Password</Lable>\n            <Input\n              value={password}\n              type=\"password\"\n              onChange={(e) => {\n                let val = e.target.value;\n                setPasswordInfo(Validator(val, patternPassword, \"Password\"));\n                setpassword(e.target.value);\n                setMatchPassword(passwordMatcher(val, confirmPassword));\n              }}\n            />\n            {passwordInfo.error && <Error>{passwordInfo.error}</Error>}\n\n            <Lable>Confirm Password</Lable>\n            <Input\n              type=\"password\"\n              value={confirmPassword}\n              onChange={(e) => {\n                let value = e.target.value;\n                setConfirmPassword(value);\n                setMatchPassword(passwordMatcher(password, value));\n              }}\n            />\n            {!matchPassword.isMatching ? (\n              <Error>{matchPassword.error}</Error>\n            ) : (\n              <Success>Password is matching</Success>\n            )}\n            <Recaptcha onChange={onChange} />\n            <LoginBttn\n              submit\n              disabled={\n                !recaptcha ||\n                isLoading ||\n                !nameInfo.status ||\n                !regInfo.status ||\n                !passwordInfo.status ||\n                !matchPassword.isMatching\n              }\n              onClick={() => {\n                if (\n                  nameInfo.status &&\n                  regInfo.status &&\n                  passwordInfo.status &&\n                  matchPassword.isMatching\n                ) {\n                  handleSubmit({\n                    username: reg,\n                    password: confirmPassword,\n                    name: name,\n                  });\n                }\n              }}\n            >\n              Register\n            </LoginBttn>\n          </SeparateDiv>\n        </LoginCol>\n      </Row>\n      <CustomSnackBar\n        isOpen={isErrorMsgOpen}\n        severity=\"error\"\n        handleClose={handleClose}\n        message={error}\n      />\n    </RegistrationDiv>\n  );\n}\n\nexport default StudentRegister;\n"],"sourceRoot":""}