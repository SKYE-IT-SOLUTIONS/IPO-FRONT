{"version":3,"sources":["components/AddJobPost.js"],"names":["JobContainer","styled","Container","font","general","TitleDiv","div","RequirementTitle","h4","Title","ApplyImage","image","Salary","p","CustomInput","Input","PositionInput","DateInput","SalaryInput","TextArea","textarea","ExtraInput","input","TableTr","tr","Error","SubmitBttn","CustomButton","AddJobPost","dispatch","useDispatch","navigate","useNavigate","storeTitle","useSelector","state","job","title","storePosition","position","storeDescription","description","storeSpecifications","specifications","storeQualifications","qualifications","storeExperience","experience","storeSalary","salary","storeDeadline","deadline","fonts","useContext","ThemeContext","useState","isLoading","setIsLoading","setJobTitle","error","status","titleInfo","setTitleInfo","setJobPosition","positionInfo","setPositionInfo","decription","setJobDescription","specList","setSpecList","specification","setJobSpecification","qlfList","setQlfList","qualification","setJobQualification","expList","setExpList","setJobExperience","setJobSalary","date","setDate","dataService","DataService","handleJobSubmit","payload","a","addJob","data","console","log","removeDataArray","useEffect","length","Simple_Validator","type","value","placeholder","onChange","e","val","target","setTitle","setPosition","rows","setDescription","style","padding","md","sm","JobPhoto","map","index","icon","marginLeft","color","height","onClick","list","filter","_","ind","setSpecifications","setQualifications","setExperience","parseInt","setSalary","setDeadline","submit","experiences"],"mappings":"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","file":"static/js/9.41e7aa75.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useContext, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Container, Row, Col, CustomButton, Input } from \"./CommonComponents\";\nimport JobPhoto from \"../assets/JobApply.svg\";\nimport { Icon } from \"@iconify/react\";\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport { Simple_Validator } from \"../utils/validation\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport DataService from \"../services/DataService\";\n\nimport {\n  setTitle,\n  setPosition,\n  setDescription,\n  setSalary,\n  setDeadline,\n  setSpecifications,\n  setQualifications,\n  setExperience,\n  removeDataArray,\n} from \"../store/jobSlice\";\nimport Spinner from \"./Spinner\";\n\nconst JobContainer = styled(Container)`\n  font-family: ${({ font }) => font.general};\n  margin: 10px 0;\n`;\n\nconst TitleDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 5px 0;\n`;\nconst RequirementTitle = styled.h4`\n  padding-top: 10px;\n  font-size: 20px;\n\n  @media (max-width: 1040px) {\n    font-size: 18px;\n  }\n`;\n\n// const Logo = styled.div`\n//   background-image: url(\"https://images.unsplash.com/photo-1555596899-d634257b55bb?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=387&q=80\");\n//   background-position: center;\n//   background-repeat: no;\n//   background-size: cover;\n//   height: 55px;\n//   width: 55px;\n//   border-radius: 50px;\n//   border: 2px solid black;\n// `;\n\nconst Title = styled.h4`\n  margin: auto 0;\n  padding-right: 5px;\n  font-size: 20px;\n  padding: 15px 0 10px 0;\n\n  @media (max-width: 1040px) {\n    font-size: 18px;\n  }\n`;\n\nconst ApplyImage = styled.div`\n  height: 450px;\n  width: 512px;\n  background-image: url(${({ image }) => image});\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  margin: auto;\n\n  @media (min-width: 768px) and (max-width: 1040px) {\n    height: 360px;\n    width: 360px;\n  }\n\n  @media (max-width: 768px) and (min-width: 576px) {\n    height: 360px;\n    width: 360px;\n  }\n\n  @media (max-width: 576px) {\n    height: 250px;\n    width: 250px;\n  }\n`;\n\nconst Salary = styled.p`\n  margin: auto;\n  padding-right: 15px;\n  font-size: 20px;\n\n  @media (max-width: 1040px) {\n    font-size: 18px;\n  }\n`;\n\nconst CustomInput = styled(Input)`\n  width: 100%;\n\n  @media (max-width: 1040px) {\n    font-size: 13px;\n  }\n`;\n\nconst PositionInput = styled(Input)`\n  width: 40%;\n\n  @media (max-width: 1040px) {\n    font-size: 13px;\n    width: 80%;\n  }\n`;\n\nconst DateInput = styled(Input)`\n  width: 150px;\n  margin-left: 15px;\n\n  @media (min-width: 768px) and (max-width: 1040px) {\n    font-size: 13px;\n  }\n`;\n\nconst SalaryInput = styled(Input)`\n  width: 150px;\n  margin-left: 15px;\n  /* margin-bottom: 10px; */\n\n  @media (max-width: 1040px) {\n    font-size: 13px;\n  }\n`;\n\nconst TextArea = styled.textarea`\n  width: 100%;\n  border-radius: 5px;\n  border: 2px solid black;\n  padding: 5px;\n\n  @media (min-width: 768px) and (max-width: 1040px) {\n    font-size: 13px;\n  }\n`;\n\nconst ExtraInput = styled.input`\n  width: 95%;\n  border-radius: 5px;\n  border: 2px solid black;\n  padding: 5px;\n\n  @media (min-width: 1041px) and (max-width: 1200px) {\n    width: 90%;\n  }\n\n  @media (max-width: 1040px) {\n    width: 85%;\n    font-size: 13px;\n  }\n`;\n\nconst TableTr = styled.tr`\n  height: auto;\n`;\n\nconst Error = styled.p`\n  color: red;\n  font-size: 14px;\n  margin: 0px;\n  padding: 5px 0px;\n`;\n\nconst SubmitBttn = styled(CustomButton)`\n  margin: 35px 10px 15px 10px;\n`;\n\nfunction AddJobPost() {\n  const dispatch = useDispatch();\n  let navigate = useNavigate();\n\n  const storeTitle = useSelector((state) => state.job.title);\n  const storePosition = useSelector((state) => state.job.position);\n  const storeDescription = useSelector((state) => state.job.description);\n  const storeSpecifications = useSelector((state) => state.job.specifications);\n  const storeQualifications = useSelector((state) => state.job.qualifications);\n  const storeExperience = useSelector((state) => state.job.experience);\n  const storeSalary = useSelector((state) => state.job.salary);\n  const storeDeadline = useSelector((state) => state.job.deadline);\n\n  const { fonts } = useContext(ThemeContext);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [title, setJobTitle] = useState(\"\");\n  const [titleInfo, setTitleInfo] = useState({ error: null, status: false });\n\n  const [position, setJobPosition] = useState(\"\");\n  const [positionInfo, setPositionInfo] = useState({\n    error: null,\n    status: false,\n  });\n\n  const [decription, setJobDescription] = useState(\"\");\n\n  const [specList, setSpecList] = useState([]);\n  const [specification, setJobSpecification] = useState(\"\");\n\n  const [qlfList, setQlfList] = useState([]);\n  const [qualification, setJobQualification] = useState(\"\");\n\n  const [expList, setExpList] = useState([]);\n  const [experience, setJobExperience] = useState(\"\");\n\n  const [salary, setJobSalary] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n\n  const dataService = new DataService();\n\n  const handleJobSubmit = async (payload) => {\n    setIsLoading(true);\n    const { status, data, error } = await dataService.addJob(payload);\n    if (status) {\n      console.log(\"Job Post Successfully\");\n      dispatch(removeDataArray());\n      setIsLoading(false);\n      navigate(`/admin/job/${data}`);\n    } else {\n      setIsLoading(false);\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (\n      storeTitle !== null ||\n      storeDescription !== null ||\n      storePosition !== null ||\n      storeSpecifications.length !== 0 ||\n      storeQualifications.length !== 0 ||\n      storeExperience.length !== 0 ||\n      storeDeadline !== null ||\n      storeSalary !== null\n    ) {\n      setJobTitle(storeTitle);\n      setJobPosition(storePosition);\n      setJobDescription(storeDescription);\n      setSpecList(storeSpecifications);\n      setQlfList(storeQualifications);\n      setExpList(storeExperience);\n      setJobSalary(storeSalary);\n      setDate(storeDeadline);\n      setTitleInfo(Simple_Validator(storeTitle, \"Title\"));\n      setPositionInfo(Simple_Validator(storePosition, \"Job Position\"));\n    }\n    setIsLoading(false);\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <Spinner />\n      ) : (\n        <JobContainer font={fonts}>\n          <TitleDiv>\n            <Title>Job Title</Title>\n            <CustomInput\n              type=\"text\"\n              value={title}\n              placeholder=\"Enter Job Title\"\n              onChange={(e) => {\n                let val = e.target.value;\n                setJobTitle(val);\n                setTitleInfo(Simple_Validator(val, \"Title\"));\n                dispatch(setTitle(val));\n              }}\n            />\n            {!titleInfo.status && <Error>{titleInfo.error}</Error>}\n\n            <Title>Job Position</Title>\n            <PositionInput\n              type=\"text\"\n              value={position}\n              placeholder=\"Enter Job Position\"\n              onChange={(e) => {\n                let val = e.target.value;\n                setJobPosition(val);\n                setPositionInfo(Simple_Validator(val, \"Job Position\"));\n                dispatch(setPosition(val));\n              }}\n            />\n            {!positionInfo.status && <Error>{positionInfo.error}</Error>}\n          </TitleDiv>\n\n          <Title>Job Description</Title>\n          <TextArea\n            rows=\"4\"\n            value={decription}\n            placeholder=\"Enter Description\"\n            onChange={(e) => {\n              let val = e.target.value;\n              setJobDescription(val);\n              dispatch(setDescription(val));\n            }}\n          />\n          <Row style={{ padding: \"15px 0\" }}>\n            <Col md={6} sm={12}>\n              <ApplyImage image={JobPhoto} />\n            </Col>\n            <Col md={6} sm={12}>\n              <RequirementTitle>Specifications</RequirementTitle>\n              <ul>\n                {specList &&\n                  specList.map((value, index) => (\n                    <li key={index}>\n                      {value}{\" \"}\n                      <Icon\n                        icon=\"ic:round-cancel\"\n                        style={{ marginLeft: \"5px\" }}\n                        color=\"red\"\n                        height=\"20\"\n                        onClick={() => {\n                          let list = specList.filter((_, ind) => ind !== index);\n                          setSpecList(list);\n                          dispatch(setSpecifications(list));\n                        }}\n                      />\n                    </li>\n                  ))}\n                {specList.length < 5 && (\n                  <li>\n                    <ExtraInput\n                      type=\"text\"\n                      value={specification}\n                      placeholder=\"Enter Job Specification\"\n                      onChange={(e) => {\n                        setJobSpecification(e.target.value);\n                      }}\n                    />{\" \"}\n                    <Icon\n                      icon=\"akar-icons:circle-plus-fill\"\n                      height=\"20\"\n                      color=\"#001e62\"\n                      onClick={() => {\n                        if (specification !== \"\") {\n                          let list = [...specList, specification];\n                          setSpecList(list);\n                          dispatch(setSpecifications(list));\n                          setJobSpecification(\"\");\n                        }\n                      }}\n                    />\n                  </li>\n                )}\n              </ul>\n\n              <RequirementTitle>Qualifications</RequirementTitle>\n              <ul>\n                {qlfList &&\n                  qlfList.map((value, index) => (\n                    <li key={index}>\n                      {value}{\" \"}\n                      <Icon\n                        icon=\"ic:round-cancel\"\n                        style={{ marginLeft: \"5px\" }}\n                        color=\"red\"\n                        height=\"20\"\n                        onClick={() => {\n                          let list = qlfList.filter((_, ind) => ind !== index);\n                          setQlfList(list);\n                          dispatch(setQualifications(list));\n                        }}\n                      />\n                    </li>\n                  ))}\n                {qlfList.length < 5 && (\n                  <li>\n                    <ExtraInput\n                      type=\"text\"\n                      value={qualification}\n                      placeholder=\"Enter Job Qualification\"\n                      onChange={(e) => {\n                        setJobQualification(e.target.value);\n                      }}\n                    />{\" \"}\n                    <Icon\n                      icon=\"akar-icons:circle-plus-fill\"\n                      height=\"20\"\n                      color=\"#001e62\"\n                      onClick={() => {\n                        if (qualification !== \"\") {\n                          let list = [...qlfList, qualification];\n                          setQlfList(list);\n                          dispatch(setQualifications(list));\n                          setJobQualification(\"\");\n                        }\n                      }}\n                    />\n                  </li>\n                )}\n              </ul>\n\n              <RequirementTitle>Experience</RequirementTitle>\n              <ul>\n                {expList &&\n                  expList.map((value, index) => (\n                    <li key={index}>\n                      {value}{\" \"}\n                      <Icon\n                        icon=\"ic:round-cancel\"\n                        style={{ marginLeft: \"5px\" }}\n                        color=\"red\"\n                        height=\"20\"\n                        onClick={() => {\n                          let list = expList.filter((_, ind) => ind !== index);\n                          setExpList(list);\n                          dispatch(setExperience(list));\n                        }}\n                      />\n                    </li>\n                  ))}\n                {expList.length < 5 && (\n                  <li>\n                    <ExtraInput\n                      type=\"text\"\n                      value={experience}\n                      placeholder=\"Enter Experience\"\n                      onChange={(e) => {\n                        setJobExperience(e.target.value);\n                      }}\n                    />{\" \"}\n                    <Icon\n                      icon=\"akar-icons:circle-plus-fill\"\n                      height=\"20\"\n                      color=\"#001e62\"\n                      onClick={() => {\n                        if (experience !== \"\") {\n                          let list = [...expList, experience];\n                          setExpList(list);\n                          dispatch(setExperience(list));\n                          setJobExperience(\"\");\n                        }\n                      }}\n                    />\n                  </li>\n                )}\n              </ul>\n\n              <table>\n                <tbody>\n                  <TableTr>\n                    <td>\n                      <Salary>Salary</Salary>\n                    </td>\n                    <td>\n                      :{\" \"}\n                      <SalaryInput\n                        type=\"string\"\n                        placeholder=\"0.00\"\n                        value={salary}\n                        onChange={(e) => {\n                          let value = parseInt(e.target.value);\n                          setJobSalary(value);\n                          dispatch(setSalary(value));\n                        }}\n                      />\n                    </td>\n                  </TableTr>\n                  <br />\n                  <TableTr>\n                    <td>\n                      <Salary>Application Deadline</Salary>\n                    </td>\n                    <td>\n                      :{\" \"}\n                      <DateInput\n                        type=\"date\"\n                        value={date}\n                        onChange={(e) => {\n                          let date = e.target.value;\n                          setDate(date);\n                          dispatch(setDeadline(date));\n                          console.log(e.target.value);\n                        }}\n                      />\n                    </td>\n                  </TableTr>\n                </tbody>\n              </table>\n              <SubmitBttn\n                onClick={() => {\n                  navigate(\"/job/preview\");\n                }}\n              >\n                Preview\n              </SubmitBttn>\n              <SubmitBttn\n                submit\n                onClick={() => {\n                  console.log(\"Title : \", titleInfo.status);\n                  if (titleInfo.status && positionInfo.status) {\n                    console.log(\"Working\");\n                    handleJobSubmit({\n                      title: title,\n                      position: position,\n                      description: decription,\n                      specifications: specList,\n                      qualifications: qlfList,\n                      experiences: expList,\n                      salary: salary,\n                      deadline: date,\n                    });\n                  }\n                }}\n              >\n                Submit\n              </SubmitBttn>\n            </Col>\n          </Row>\n        </JobContainer>\n      )}\n    </>\n  );\n}\n\nexport default AddJobPost;\n"],"sourceRoot":""}